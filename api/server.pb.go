// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Response struct {
	Graph                string   `protobuf:"bytes,1,opt,name=graph,proto3" json:"graph,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_server_1077832edf7da4f8, []int{0}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetGraph() string {
	if m != nil {
		return m.Graph
	}
	return ""
}

func init() {
	proto.RegisterType((*Response)(nil), "api.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GraphReplicatorClient is the client API for GraphReplicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GraphReplicatorClient interface {
	ShowGraph(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	SyncGraph(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*Response, error)
}

type graphReplicatorClient struct {
	cc *grpc.ClientConn
}

func NewGraphReplicatorClient(cc *grpc.ClientConn) GraphReplicatorClient {
	return &graphReplicatorClient{cc}
}

func (c *graphReplicatorClient) ShowGraph(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.GraphReplicator/ShowGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphReplicatorClient) SyncGraph(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/api.GraphReplicator/SyncGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphReplicatorServer is the server API for GraphReplicator service.
type GraphReplicatorServer interface {
	ShowGraph(context.Context, *empty.Empty) (*Response, error)
	SyncGraph(context.Context, *SyncRequest) (*Response, error)
}

func RegisterGraphReplicatorServer(s *grpc.Server, srv GraphReplicatorServer) {
	s.RegisterService(&_GraphReplicator_serviceDesc, srv)
}

func _GraphReplicator_ShowGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphReplicatorServer).ShowGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphReplicator/ShowGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphReplicatorServer).ShowGraph(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphReplicator_SyncGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphReplicatorServer).SyncGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GraphReplicator/SyncGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphReplicatorServer).SyncGraph(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GraphReplicator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GraphReplicator",
	HandlerType: (*GraphReplicatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowGraph",
			Handler:    _GraphReplicator_ShowGraph_Handler,
		},
		{
			MethodName: "SyncGraph",
			Handler:    _GraphReplicator_SyncGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_server_1077832edf7da4f8) }

var fileDescriptor_server_1077832edf7da4f8 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x8d, 0xc1, 0x8a, 0xc2, 0x30,
	0x14, 0x45, 0xa7, 0x0c, 0x33, 0xd8, 0x50, 0x51, 0x82, 0x88, 0xd4, 0x4d, 0xe9, 0xca, 0x55, 0x0a,
	0xea, 0x2f, 0x88, 0xfb, 0xf4, 0x0b, 0xd2, 0xf2, 0x6c, 0x03, 0xb5, 0xef, 0x99, 0xa4, 0x96, 0xfe,
	0xbd, 0x34, 0xa1, 0x2b, 0x77, 0x39, 0x37, 0xf7, 0xdd, 0xc3, 0x12, 0x0b, 0xe6, 0x0d, 0x46, 0x90,
	0x41, 0x87, 0xfc, 0x57, 0x91, 0x4e, 0x8f, 0x0d, 0x62, 0xd3, 0x41, 0xe1, 0xa3, 0x6a, 0x78, 0x14,
	0xf0, 0x24, 0x37, 0x85, 0x46, 0x9a, 0xd4, 0x9d, 0x86, 0xde, 0x05, 0xca, 0x33, 0xb6, 0x92, 0x60,
	0x09, 0x7b, 0x0b, 0x7c, 0xc7, 0xfe, 0x1a, 0xa3, 0xa8, 0x3d, 0x44, 0x59, 0x74, 0x8a, 0x65, 0x80,
	0xf3, 0xc8, 0x36, 0xf7, 0xf9, 0x21, 0x81, 0x3a, 0x5d, 0x2b, 0x87, 0x86, 0x5f, 0x59, 0x5c, 0xb6,
	0x38, 0xfa, 0x98, 0xef, 0x45, 0xb0, 0x89, 0xc5, 0x26, 0x6e, 0xb3, 0x2d, 0x5d, 0x0b, 0x45, 0x5a,
	0x2c, 0xe3, 0xf9, 0x0f, 0x17, 0x2c, 0x2e, 0xa7, 0xbe, 0x0e, 0x57, 0x5b, 0xff, 0x3b, 0xb3, 0x84,
	0xd7, 0x00, 0xd6, 0x7d, 0xf5, 0xab, 0x7f, 0x3f, 0x78, 0xf9, 0x04, 0x00, 0x00, 0xff, 0xff, 0x6f,
	0x44, 0x26, 0x63, 0xe1, 0x00, 0x00, 0x00,
}
